<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>c_级数</title>
      <link href="/2018/03/22/c_%E7%BA%A7%E6%95%B0/"/>
      <content type="html"><![CDATA[<h2 id="初步建立"><a href="#初步建立" class="headerlink" title="初步建立"></a>初步建立</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">double fx(int x)//定义通项式</span><br><span class="line">&#123;</span><br><span class="line">double s;</span><br><span class="line">s=1/pow(x,2);//在此修改通项</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i=1;int b=10000;double t=0;</span><br><span class="line">cout&lt;&lt;&quot;请输入最后一项:&quot;;</span><br><span class="line">cin&gt;&gt;b;</span><br><span class="line">for(i;i&lt;=b;i++)</span><br><span class="line">t+=fx(i);</span><br><span class="line">cout&lt;&lt;&quot;结果为：&quot;&lt;&lt;t;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果还行,但是无法获得精度</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>加入精度变量，使输入可选为最后一项或精度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">double fx(int x)//定义通项式</span><br><span class="line">&#123;</span><br><span class="line">double s;</span><br><span class="line">s=1/pow(x,2);//在此修改通项</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line">bool ju()    //区分计算类型</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    cout&lt;&lt;&quot;请选择计算模式。\n&quot;;</span><br><span class="line">    cout&lt;&lt;&quot;1.输入精度\n&quot;;</span><br><span class="line">    cout&lt;&lt;&quot;2.输入最后一项\n&quot;;</span><br><span class="line">    cout&lt;&lt;&quot;____\b&quot;;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    if(a==1)</span><br><span class="line">        return 0;</span><br><span class="line">    else if(a==2)</span><br><span class="line">        return 1;</span><br><span class="line">    else</span><br><span class="line">        cout&lt;&lt;&quot;请输入1或2&quot;;</span><br><span class="line">        return ju();</span><br><span class="line">&#125;</span><br><span class="line">double mod1()   //精度计算模式</span><br><span class="line">&#123;</span><br><span class="line">    double q=0.01;int i=1;double t=0;</span><br><span class="line">    cout&lt;&lt;&quot;请输入精度：&quot;;</span><br><span class="line">    cin&gt;&gt;q;</span><br><span class="line">    for(i;fx(i)&gt;=q;i++)</span><br><span class="line">        t+=fx(i);</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line">double mod2()   //最后一项计算模式</span><br><span class="line">&#123;</span><br><span class="line">int i=1;int b=10000;double t=0;</span><br><span class="line">cout&lt;&lt;&quot;请输入最后一项:&quot;;</span><br><span class="line">cin&gt;&gt;b;</span><br><span class="line">for(i;i&lt;=b;i++)</span><br><span class="line">t+=fx(i);</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    double t;</span><br><span class="line">    if(ju())</span><br><span class="line">        t=mod2();</span><br><span class="line">    else</span><br><span class="line">        t=mod1();</span><br><span class="line">    cout&lt;&lt;&quot;所求为：&quot;&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完美运行！<br>问题又来了，如何通项改变了怎么办，能不能输入通项呢？<br>这与求定积分那个的问题类似，最后都归结为：<br><strong>如何解析输入的表达式</strong><br>未完</p>]]></content>
      
      <categories>
          
          <category> 数学工具 </category>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于解析数学表达式的一点构想</title>
      <link href="/2018/03/20/%E5%85%B3%E4%BA%8E%E8%A7%A3%E6%9E%90%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E7%82%B9%E6%9E%84%E6%83%B3/"/>
      <content type="html"><![CDATA[<p>前面两篇留下了一个解析数学表达式的问题。有时不得不说c语言不适合数学建模，解析数学表达式变成一大难题。下面给出解决方案。</p><h2 id="方案一：利用python"><a href="#方案一：利用python" class="headerlink" title="方案一：利用python"></a>方案一：利用python</h2><p>如果这个程序用python来编，那么一定会非常愉快的，因为有个强大的函数eval()。所以不妨用python来编，然后嵌入c++。<br>python接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#解析数学表达式</span><br><span class="line">def fx():</span><br><span class="line">    a = input(&quot;请输入表达式：&quot;)</span><br><span class="line">    return eval(a)</span><br></pre></td></tr></table></figure></p><p>嵌入c后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &quot;Python.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;a</span><br><span class="line">    Py_Initialize();</span><br><span class="line">    PyRun_SimpleString(&quot;print(eval(a)) &quot;);  //输入的python命令</span><br><span class="line">    Py_Finalize();</span><br><span class="line">    getchar();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就实现了在c中嵌入python并将表达式计算的过程。<br>类比这个，前面级数和不定积分中的输入表达式就不能实现，在此不赘述。<br>其实，前面的两个程序用python很容易实现，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#求级数</span><br><span class="line">import math</span><br><span class="line">a = input(&quot;请输入通项式&quot;)</span><br><span class="line">def ax(x):</span><br><span class="line">    s = eval(a)</span><br><span class="line">    return s</span><br><span class="line">b = int(input(&quot;请输入最后一个值:&quot;))</span><br><span class="line">s =0</span><br><span class="line">for i in range(1,b):</span><br><span class="line">    s += ax(i)</span><br><span class="line">print(&quot;级数为 &#123;&#125;&quot;.format(s))</span><br></pre></td></tr></table></figure></p><p>在此不做之前的优化，只为说明eval()函数的实用性。</p><h2 id="方案二：自己用写一个eval-函数"><a href="#方案二：自己用写一个eval-函数" class="headerlink" title="方案二：自己用写一个eval()函数"></a>方案二：自己用写一个eval()函数</h2><p>emmmm,这个博主仍在努力</p>]]></content>
      
      <categories>
          
          <category> 数学工具 </category>
          
          <category> c+py </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> py </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>py_requests简单爬取</title>
      <link href="/2018/03/18/py_requests%E7%AE%80%E5%8D%95%E7%88%AC%E5%8F%96/"/>
      <content type="html"><![CDATA[<p>学习使用requests模块爬取简单网页</p><h2 id="首先安装requests模块"><a href="#首先安装requests模块" class="headerlink" title="首先安装requests模块"></a>首先安装requests模块</h2><pre><code>pip install requests</code></pre><h2 id="初步建立"><a href="#初步建立" class="headerlink" title="初步建立"></a>初步建立</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = input(&quot;请输入地址：&quot;)</span><br><span class="line">r = requests.get(url)</span><br><span class="line">requests.encoding=&apos;utf-8&apos;</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>效果还行</p>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
          <category> py </category>
          
      </categories>
      
      
        <tags>
            
            <tag> py </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c_定积分</title>
      <link href="/2018/03/17/c_%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
      <content type="html"><![CDATA[<h2 id="求定积分近似值"><a href="#求定积分近似值" class="headerlink" title="求定积分近似值"></a>求定积分近似值</h2><h3 id="初步建立"><a href="#初步建立" class="headerlink" title="初步建立"></a>初步建立</h3><pre><code>#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;    double fx(double x=0)    //定义被积函数{    double s;     s=pow(2,x);    //在此修改函数    return s;double gx(double a=0,double b=0,int n=1)    //定义简单积分，先默认a&lt;=b{    int i=1;double l=(b-a)/n;double s=0;    for(i;i&lt;=n;i++)        s+=fx(a+i*l);    return s;}    int main()    //加入防错系统{    double a=0;double b=0;int n=1;    cout&lt;&lt;&quot;请输入积分下限，上限，分割份数:&quot;;    cin&gt;&gt;a&gt;&gt;b&gt;&gt;n;    if(a&lt;=b)        cout&lt;&lt;&quot;所求积分为:&quot;&lt;&lt;gx(a,b,n)&lt;&lt;endl;    else        cout&lt;&lt;&quot;所求积分为:&quot;&lt;&lt;-gx(b,a,n)&lt;&lt;endl;    return 0;}</code></pre><p>由于使用过剩近似值代替，误差较大，应做出改进</p><h3 id="改进近似值"><a href="#改进近似值" class="headerlink" title="改进近似值"></a>改进近似值</h3><pre><code>#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;    double fx(double x=0)    //定义被积函数{    double s;     s=pow(2,x);    //在此修改函数    return s;}    double gx(double a=0,double b=0,int n=1)    //定义简单积分，先默认a&lt;=b,过剩{    int i=1;double l=(b-a)/n;double s=0;    for(i;i&lt;=n;i++)        s+=fx(a+i*l);    s*=l;    return s;}    double hx(double a=0,double b=0,int n=1)    //定义简单积分，先默认a&lt;=b，不足{    int i=0;double l=(b-a)/n;double s=0;    for(i;i&lt;n;i++)        s+=fx(a+i*l);    s*=l;    return s;}    int main()    //加入防错系统{    double a=0;double b=0;int n=1;    cout&lt;&lt;&quot;请输入积分下限，上限，分割份数:&quot;;    cin&gt;&gt;a&gt;&gt;b&gt;&gt;n;    if(a&lt;=b)        cout&lt;&lt;&quot;所求积分在  &quot;&lt;&lt;hx(a,b,n)&lt;&lt;&quot;到  &quot;&lt;&lt;gx(a,b,n)&lt;&lt;&quot;之间,平均值为  &quot;&lt;&lt;(hx(a,b,n)+gx(a,b,n))/2&lt;&lt;endl;    else        cout&lt;&lt;&quot;所求积分在  &quot;&lt;&lt;-hx(b,a,n)&lt;&lt;&quot;到  &quot;&lt;&lt;-gx(b,a,n)&lt;&lt;&quot;之间,平均值为  &quot;&lt;&lt;-(hx(b,a,n)+gx(b,a,n))/2&lt;&lt;endl;    return 0;}</code></pre><p>尚不能比较两近似值大小</p><h3 id="改进：比较近似值大小"><a href="#改进：比较近似值大小" class="headerlink" title="改进：比较近似值大小"></a>改进：比较近似值大小</h3><pre><code>#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;    double fx(double x=0)    //定义被积函数{    double s;     s=pow(2,x);    //在此修改函数    return s;}    double gx(double a=0,double b=0,int n=1)    //定义简单积分，先默认a&lt;=b,过剩{    int i=1;double l=(b-a)/n;double s=0;    for(i;i&lt;=n;i++)        s+=fx(a+i*l);    s*=l;    return s;}    double hx(double a=0,double b=0,int n=1)    //定义简单积分，先默认a&lt;=b，不足{    int i=0;double l=(b-a)/n;double s=0;    for(i;i&lt;n;i++)        s+=fx(a+i*l);    s*=l;    return s;}    int main()    //加入防错系统{    double a=0;double b=0;int n=1;    cout&lt;&lt;&quot;请输入积分下限，上限，分割份数:&quot;;    cin&gt;&gt;a&gt;&gt;b&gt;&gt;n;    if(a&lt;=b)    {        if(hx(a,b,n)&lt;gx(a,b,n))            cout&lt;&lt;&quot;所求积分在  &quot;&lt;&lt;hx(a,b,n)&lt;&lt;&quot;到  &quot;&lt;&lt;gx(a,b,n)&lt;&lt;&quot;之间,平均值为  &quot;&lt;&lt;(hx(a,b,n)+gx(a,b,n))/2&lt;&lt;endl;        else            cout&lt;&lt;&quot;所求积分在  &quot;&lt;&lt;gx(a,b,n)&lt;&lt;&quot;到  &quot;&lt;&lt;hx(a,b,n)&lt;&lt;&quot;之间,平均值为  &quot;&lt;&lt;(hx(a,b,n)+gx(a,b,n))/2&lt;&lt;endl;    }    else    {        if(hx(b,a,n)&gt;gx(b,a,n))            cout&lt;&lt;&quot;所求积分在  &quot;&lt;&lt;-hx(b,a,n)&lt;&lt;&quot;到  &quot;&lt;&lt;-gx(b,a,n)&lt;&lt;&quot;之间,平均值为  &quot;&lt;&lt;-(hx(b,a,n)+gx(b,a,n))/2&lt;&lt;endl;        else            cout&lt;&lt;&quot;所求积分在  &quot;&lt;&lt;-gx(b,a,n)&lt;&lt;&quot;到  &quot;&lt;&lt;-hx(b,a,n)&lt;&lt;&quot;之间,平均值为  &quot;&lt;&lt;-(hx(b,a,n)+gx(b,a,n))/2&lt;&lt;endl;    }    return 0;}</code></pre><p>尚不能修改被积函数<br>    未完</p>]]></content>
      
      <categories>
          
          <category> 数学工具 </category>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
